import RPi.GPIO as GPIO
import time
import sys
import signal
import datetime

GPIO.setmode(GPIO.BCM)

DOOR_SENSOR_PIN = 18

BUZZER_PIN = 11

isOpen = None
oldIsOpen = None
buzzing = True

n = 25
a = [0] * (n+1)

for i in range(1, n):   
	# storing sum in the 
	# preceding location
	a[i-1] = round(((n+2)/i),1)
print str(a)[1:-1]

alarmPos = 1
alarmStartTime = None

def cleanupBuzzer(signal, frame):
	GPIO.output(BUZZER_PIN, False)
	GPIO.cleanup()
	sys.exit(0)

GPIO.setup(DOOR_SENSOR_PIN, GPIO.IN, pull_up_down = GPIO.PUD_UP)

GPIO.setup(BUZZER_PIN, GPIO.OUT)

GPIO.output(BUZZER_PIN, False)

signal.signal(signal.SIGINT, cleanupBuzzer)

waitTime = 0.1
while True:
	oldIsOpen = isOpen
	isOpen = GPIO.input(DOOR_SENSOR_PIN)
	
	if (isOpen):
		if (isOpen != oldIsOpen):
			print "Door Opened", datetime.datetime.now()
			print ""
			alarmStartTime = time.time()
		if (buzzing):
			GPIO.output(BUZZER_PIN, GPIO.LOW)
			buzzing = False
			waitTime = a[alarmPos]
		else:
			alarmPos = alarmPos + 1
			GPIO.output(BUZZER_PIN, GPIO.HIGH)
			buzzing = True
			waitTime = 0.1
			time.sleep(waitTime)
			GPIO.output(BUZZER_PIN, GPIO.LOW)
			time.sleep(waitTime)
			GPIO.output(BUZZER_PIN, GPIO.HIGH)
		sys.stdout.write('\033[F\033[K')
		print "Time since opened", int(time.time() - alarmStartTime)
	else:
		if (isOpen != oldIsOpen):
			print "Door Closed"
			alarmPos = 1
		GPIO.output(BUZZER_PIN, False)
	time.sleep(waitTime)
	if (alarmPos > (len(a)-1)):
		alarmPos = n-1
